qplot(carat,price,data = diamonds ,colour=clarity)
#Proyecto final entornos DS (R)
library(ggplot2)
#Cargar los datos en R.
#Eliminar los missing values, que estan codicados como -9999.00.
setwd("/home/osboxes/app/Master-BigData-CIFF-2016/entornos-DS-R")
diabetesdf <- read.table('diabetes.data',header=TRUE,na.strings = '-9999.0',skip=0)
#diabetesdf[diabetesdf=='-9999.0'] <- NA
diabetesdfwork<-na.omit(diabetesdf)
which(is.na(diabetesdfwork))
#Ver el tipo de cada una de las variables.
str(diabetesdfwork)
#Realizar un analisis estadIstico de las variables
summary(diabetesdfwork)
head(diabetesdfwork)
head(diabetesdf)
#Hacer un GRAFICO de cajas (boxplot) donde se pueda ver la informacion anterior de #forma GRAFICA
#boxplot(diabetesdfwork, use.cols = TRUE)
ggplot(stack(diabetesdfwork), aes(x = ind, y = values)) +
geom_boxplot()
#Calcular la media para las columnaslas que tienen SEX=M y la
#media para las columnaslas que tienen SEX=F, utilizando la
#funcion tapply
#Paracada columna
sex <- c("F","M")
dtValoresXSexo <- data.frame(sex)
sex <- c("F","M")
dtValoresXSexo <- data.frame(sex)
for (i in 1:ncol(Datos)) {
if (is.numeric(Datos[[i]])){
sal <- tapply(Datos[[i]],Datos$SEX,mean )
saldt <- data.frame(sal)
names(saldt)[1] <- names(Datos)[i]
dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
head(dtValoresXSexo)
dtValoresXSexo <- data.frame(sex)
for (i in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[i]])){
sal <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
saldt <- data.frame(sal)
names(saldt)[1] <- names(Datos)[i]
dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
for (i in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[i]])){
sal <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
saldt <- data.frame(sal)
names(saldt)[1] <- names(diabetesdfwork)[i]
dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
head(dtValoresXSexo)
t(dtValoresXSexo)
sal
sex <- c("F","M")
dtValoresXSexo <- data.frame(sex)
for (colname in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[i]])){
sal[colname] <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
sal
sal<-data.frame()
for (colname in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[i]])){
sal[[colname]] <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
sal<-data.frame()
for (colname in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
sal[[colname]] <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
sal<-data.frame()
for (colname in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
sal[colname] <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
colnames(diabetesdf)
colnames(sal)<-colnames(diabetesdfwork)
sal<-data.frame()
colnames(sal)<-colnames(diabetesdfwork)
colnames(sal1)<-colnames(diabetesdfwork)
for (colname in colnames(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
sal3[colname] <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
sal<-diabetesdfwork[0,]
for (colname in colnames(diabetesdfwork)) {
for (colname in colnames(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
sal[colname] <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
sal
head(sal)
head(sal)
#Proyecto final entornos DS (R)
library(ggplot2)
#Cargar los datos en R.
#Eliminar los missing values, que estan codicados como -9999.00.
setwd("/home/osboxes/app/Master-BigData-CIFF-2016/entornos-DS-R")
diabetesdf <- read.table('diabetes.data',header=TRUE,na.strings = '-9999.0',skip=0)
#diabetesdf[diabetesdf=='-9999.0'] <- NA
diabetesdfwork<-na.omit(diabetesdf)
which(is.na(diabetesdfwork))
#Ver el tipo de cada una de las variables.
str(diabetesdfwork)
#Realizar un analisis estadIstico de las variables
summary(diabetesdfwork)
head(diabetesdfwork)
head(diabetesdf)
#Hacer un GRAFICO de cajas (boxplot) donde se pueda ver la informacion anterior de #forma GRAFICA
#boxplot(diabetesdfwork, use.cols = TRUE)
ggplot(stack(diabetesdfwork), aes(x = ind, y = values)) +
geom_boxplot()
#Calcular la media para las columnaslas que tienen SEX=M y la
#media para las columnaslas que tienen SEX=F, utilizando la
#funcion tapply
#Paracada columna
sex <- c("F","M")
#dtValoresXSexo <- data.frame(sex)
sal<-diabetesdfwork[0,]
for (colname in colnames(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
sal[colname] <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
head(sal)
sal
sal<-diabetesdfwork[0,]
for (colname in colnames(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
sal[[colname]] <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
head(sal)
print(sal[colname])
}
}
tapply(diabetesdfwork$AGE, diabetesdfwork$SEX=='M',mean)
sal[colname] <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
print(sal[colname])
}
sal<-diabetesdfwork[0,]
for (colname in colnames(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
sal[colname] <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
print(sal[colname])
}
}
sal<-diabetesdfwork[0,]
for (colname in colnames(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
sal[,colname] <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
print(sal[colname])
}
}
for (colname in colnames(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
val <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
#dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
print(val)
}
}
sal<-diabetesdfwork[0,]
for (colname in colnames(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[colname]])){
dtValoresXSexo <- tapply(diabetesdfwork[[colname]],diabetesdfwork$SEX,mean )
#saldt <- data.frame(sal)
#names(saldt)[1] <- names(diabetesdfwork)[i]
dtValoresXSexo <- cbind(dtValoresXSexo,sal[colname])
print(dtValoresXSexo)
}
}
dtValoresXSexo
vectorSex <- c("F","M")
dfSex <- data.frame(vectorSex)
for (i in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[i]])){
temp <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
tempdf <- data.frame(temp)
names(tempdf)[1] <- names(diabetesdfwork)[i]
dfSex <- cbind(dfSex,saldt[1])
}
}
head(dfSex)
tapply(diabetesdfwork[,1],diabetesdfwork$SEX, mean)
tapply(diabetesdfwork[,],diabetesdfwork$SEX, mean)
vectorSex <- c("F","M")
dfSex <- data.frame(vectorSex)
for (i in 1:ncol(diabetesdfwork)) {
library(ggplot2)
#Cargar los datos en R.
#Eliminar los missing values, que estan codicados como -9999.00.
setwd("/home/osboxes/app/Master-BigData-CIFF-2016/entornos-DS-R")
diabetesdf <- read.table('diabetes.data',header=TRUE,na.strings = '-9999.0',skip=0)
#diabetesdf[diabetesdf=='-9999.0'] <- NA
diabetesdfwork<-na.omit(diabetesdf)
which(is.na(diabetesdfwork))
#Ver el tipo de cada una de las variables.
str(diabetesdfwork)
#Realizar un analisis estadIstico de las variables
summary(diabetesdfwork)
head(diabetesdfwork)
head(diabetesdf)
#Hacer un GRAFICO de cajas (boxplot) donde se pueda ver la informacion anterior de #forma GRAFICA
#boxplot(diabetesdfwork, use.cols = TRUE)
ggplot(stack(diabetesdfwork), aes(x = ind, y = values)) +
library(ggplot2)
#Cargar los datos en R.
#Eliminar los missing values, que estan codicados como -9999.00.
setwd("/home/osboxes/app/Master-BigData-CIFF-2016/entornos-DS-R")
diabetesdf <- read.table('diabetes.data',header=TRUE,na.strings = '-9999.0',skip=0)
#diabetesdf[diabetesdf=='-9999.0'] <- NA
diabetesdfwork<-na.omit(diabetesdf)
which(is.na(diabetesdfwork))
#Ver el tipo de cada una de las variables.
str(diabetesdfwork)
#Realizar un analisis estadIstico de las variables
summary(diabetesdfwork)
head(diabetesdfwork)
head(diabetesdf)
#Hacer un GRAFICO de cajas (boxplot) donde se pueda ver la informacion anterior de #forma GRAFICA
#boxplot(diabetesdfwork, use.cols = TRUE)
ggplot(stack(diabetesdfwork), aes(x = ind, y = values)) +
geom_boxplot()
#Calcular la media para las columnaslas que tienen SEX=M y la
#media para las columnaslas que tienen SEX=F, utilizando la
#funcion tapply
#Paracada columna
vectorSex <- c("F","M")
dfSex <- data.frame(vectorSex)
for (i in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[i]])){
temp <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
tempdf <- data.frame(temp)
names(tempdf)[1] <- names(diabetesdfwork)[i]
dfSex <- cbind(dfSex,saldt[1])
}
}
head(dfSex)
head(diabetesdfwork)
for (i in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[i]])){
sal <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
saldt <- data.frame(sal)
names(saldt)[1] <- names(diabetesdfwork)[i]
dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
head(dtValoresXSexo)
for (i in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[i]])){
temp <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
tempdf <- data.frame(temp)
names(tempdf)[1] <- names(diabetesdfwork)[i]
dfSex <- cbind(dfSex,tempdf[1])
}
}
for (i in 1:ncol(diabetesdfwork)) {
sal <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
saldt <- data.frame(sal)
names(saldt)[1] <- names(diabetesdfwork)[i]
dtValoresXSexo <- cbind(dtValoresXSexo,saldt[1])
}
}
head(dfSex)
head(dfSex)
head(diabetesdfwork)
diabetesdfwork[-"SEX"]
diabetesdfwork["SEX"]
diabetesdfwork[,-"SEX"]
diabetesdfwork[,"-SEX"]
diabetesdfwork[,-2]
head(diabetesdfwork)
diabetesdfwork[,-2]
for (i in 1:ncol(diabetesdfwork[,-2])) { #Como la columna sexo es categorica no la contamos
indBajo <- mean(diabetesdfwork[[i]])-(3*mad(diabetesdfwork[[i]]))
indSuperior <- mean(diabetesdfwork[[i]])+(3*mad(diabetesdfwork[[i]]))
Outlier <- diabetesdfwork[ (diabetesdfwork[[i]]<indBajo) | (diabetesdfwork[[i]]> indSuperior) ,]
diabetesdfwork[ (diabetesdfwork[[i]]<indBajo) | (diabetesdfwork[[i]]> indSuperior) ,] <- NA
diabetesdfwork <- na.omit( diabetesdfwork )
}
head(diabetesdfwork)
diabetesdfwork[1,1]<-500
for (i in 1:ncol(diabetesdfwork[,-2])) { #Como la columna sexo es categorica no la contamos
indBajo <- mean(diabetesdfwork[[i]])-(3*mad(diabetesdfwork[[i]]))
indSuperior <- mean(diabetesdfwork[[i]])+(3*mad(diabetesdfwork[[i]]))
Outlier <- diabetesdfwork[ (diabetesdfwork[[i]]<indBajo) | (diabetesdfwork[[i]]> indSuperior) ,]
diabetesdfwork[ (diabetesdfwork[[i]]<indBajo) | (diabetesdfwork[[i]]> indSuperior) ,] <- NA
diabetesdfwork <- na.omit( diabetesdfwork )
}
head(diabetesdfwork)
colnames(diabetesdfwork[,-2]
)
for (col in colnames(diabetesdfwork[,-2])) { #Como la columna sexo es categorica no la contamos
indBajo <- mean(diabetesdfwork[[col]])-(3*mad(diabetesdfwork[[col]]))
indSuperior <- mean(diabetesdfwork[[col]])+(3*mad(diabetesdfwork[[col]]))
Outlier <- diabetesdfwork[ (diabetesdfwork[[col]]<indBajo) | (diabetesdfwork[[col]]> indSuperior) ,]
diabetesdfwork[ (diabetesdfwork[[col]]<indBajo) | (diabetesdfwork[[col]]> indSuperior) ,] <- NA
diabetesdfwork <- na.omit( diabetesdfwork )
}
diabetesdfwork[1,1]<-500
for (col in colnames(diabetesdfwork[,-2])) { #Como la columna sexo es categorica no la contamos
indBajo <- mean(diabetesdfwork[[col]])-(3*mad(diabetesdfwork[[col]]))
indSuperior <- mean(diabetesdfwork[[col]])+(3*mad(diabetesdfwork[[col]]))
Outlier <- diabetesdfwork[ (diabetesdfwork[[col]]<indBajo) | (diabetesdfwork[[col]]> indSuperior) ,]
diabetesdfwork[ (diabetesdfwork[[col]]<indBajo) | (diabetesdfwork[[col]]> indSuperior) ,] <- NA
diabetesdfwork <- na.omit( diabetesdfwork )
}
head(diabetesdfwork)
indices<-sample(1:nrow(diabdfcategorical),nrow(diabdfcategorical)*70/100)
train<-diabdfcategorical[indices,]
indices<-sample(1:nrow(diabdfcategorical),nrow(diabdfcategorical)*30/100)
test<-diabdfcategorical[indices,]
diabdfcategorical<-diabetesdfwork
dataframe<-head(diabdfcategorical)
diabdfcategorical$SEX<-factor(as.numeric(diabdfcategorical$SEX))
diabdfcategorical$SEX<-as.numeric(diabdfcategorical$SEX)
str(diabdfcategorical)
# ploteamos las variales para detectar posibles desviaciones de outliers
ggplot(stack(diabdfcategorical), aes(x = ind, y = values)) +
geom_boxplot()
#Funcion que detecta y elimina los outliers con el rango intercuartil sobre el dataset sin variables categoricas
outliersf <- function(dataframe){
columns<-colnames(dataframe)
for (xcol in columns) {
quantiles<-quantile(dataframe[[xcol]])
print(quantiles)
q3<-quantiles[4]
q1<-quantiles[2]
irange<-3*(quantiles[4]-quantiles[2])
dataframe[dataframe[[xcol]] > q3+irange,xcol]
dataframe[dataframe[[xcol]] < q1-irange,xcol]
print(sum(is.na(dataframe)))
na.omit(dataframe)
}
}
#Limpiamos el dataset con el MAD
diabetesdfwork[1,1]<-500
for (col in colnames(diabetesdfwork[,-2])) { #Como la columna sexo es categorica no la contamos
indBajo <- mean(diabetesdfwork[[col]])-(3*mad(diabetesdfwork[[col]]))
indSuperior <- mean(diabetesdfwork[[col]])+(3*mad(diabetesdfwork[[col]]))
Outlier <- diabetesdfwork[ (diabetesdfwork[[col]]<indBajo) | (diabetesdfwork[[col]]> indSuperior) ,]
diabetesdfwork[ (diabetesdfwork[[col]]<indBajo) | (diabetesdfwork[[col]]> indSuperior) ,] <- NA
diabetesdfwork <- na.omit( diabetesdfwork )
}
#separar los datasets en dos fragmentos
indices<-sample(1:nrow(diabdfcategorical),nrow(diabdfcategorical)*70/100)
train<-diabdfcategorical[indices,]
indices<-sample(1:nrow(diabdfcategorical),nrow(diabdfcategorical)*30/100)
test<-diabdfcategorical[indices,]
#escalar los datos para que tenga media cero y varianza 1
escale_dataset<-function(dataframe){
columns<-colnames(dataframe)
for (xcol in columns) {
newdataframe<-apply(dataframe,c(1,2),function(x,y) (x-mean(y))/sd(y),y=xcol )
}
return(newdataframe)
}
#escalar los datos para que tenga media cero y varianza 1
scaled<-scale(train)
head(diabetesdf)
#Realizar un modelo de regresion lineal de la variable de respuesta sobre el resto y ajustarlo por #minimos cuadrados usando unicamente los datos del conjunto de entrenamiento.
l_regr<-lm(Y~AGE+SEX+BMI+BP+S1+S2+S3+S4+S5+S6, data=train)
YPredicttrain<- predict(l_regr)
#Calcular el error cuadratico medio de los datos del conjunto de entrenamiento y de los datos del #conjunto de test
ecm=(mean(train$Y-YPredicttrain))^2
emc
ecm
ecmtrain=(mean(train$Y-YPredicttrain))^2
regresion_test <- lm(Y ~ AGE + SEX + BMI + BP + S1 + S2 + S3 + S4+ S5 + S6, data=test)
YPredictTest=predict(regresion_test)
ecmtest=(mean(test$Y-YPredictTest))^2
emctest
ecmtest
#Proyecto final entornos DS (R)
library(ggplot2)
#Cargar los datos en R.
#Eliminar los missing values, que estan codicados como -9999.00.
setwd("/home/osboxes/app/Master-BigData-CIFF-2016/entornos-DS-R")
diabetesdf <- read.table('diabetes.data',header=TRUE,na.strings = '-9999.0',skip=0)
#diabetesdf[diabetesdf=='-9999.0'] <- NA
diabetesdfwork<-na.omit(diabetesdf)
which(is.na(diabetesdfwork))
#Ver el tipo de cada una de las variables.
str(diabetesdfwork)
#Realizar un analisis estadIstico de las variables
summary(diabetesdfwork)
head(diabetesdfwork)
head(diabetesdf)
#Hacer un GRAFICO de cajas (boxplot) donde se pueda ver la informacion anterior de #forma GRAFICA
#boxplot(diabetesdfwork, use.cols = TRUE)
ggplot(stack(diabetesdfwork), aes(x = ind, y = values)) +
geom_boxplot()
#Calcular la media para las columnaslas que tienen SEX=M y la
#media para las columnaslas que tienen SEX=F, utilizando la
#funcion tapply
#Paracada columna
vectorSex <- c("F","M")
dfSex <- data.frame(vectorSex)
for (i in 1:ncol(diabetesdfwork)) {
if (is.numeric(diabetesdfwork[[i]])){
temp <- tapply(diabetesdfwork[[i]],diabetesdfwork$SEX,mean )
tempdf <- data.frame(temp)
names(tempdf)[1] <- names(diabetesdfwork)[i]
dfSex <- cbind(dfSex,tempdf[1])
}
}
head(dfSex)
#Calcular la correlacion de todas las variables numericas con
#la variable Y
cor(diabetesdfwork[-2],use="everything")
#grafica con la mayor correlacion
ggplot(diabetesdfwork, aes(x = Y, y = BMI)) +  geom_point(shape=1)
#grafica con la menor correlacion
ggplot(diabetesdfwork, aes(x = Y, y = S2)) +  geom_point(shape=1)
#grafica si la correlacion fuese =1. Lo que pasaría es que todos los puntos estarían en la recta de regresion básica por defecto
ggplot(diabetesdfwork, aes(x = Y, y = Y)) +  geom_point(shape=1)
#cmabiar la variable sex a numerica para poder obtener los quantiles
diabdfcategorical<-diabetesdfwork
dataframe<-head(diabdfcategorical)
diabdfcategorical$SEX<-factor(as.numeric(diabdfcategorical$SEX))
diabdfcategorical$SEX<-as.numeric(diabdfcategorical$SEX)
str(diabdfcategorical)
# ploteamos las variales para detectar posibles desviaciones de outliers
ggplot(stack(diabdfcategorical), aes(x = ind, y = values)) +
geom_boxplot()
#Funcion que detecta y elimina los outliers con el rango intercuartil sobre el dataset sin variables categoricas
outliersf <- function(dataframe){
columns<-colnames(dataframe)
for (xcol in columns) {
quantiles<-quantile(dataframe[[xcol]])
print(quantiles)
q3<-quantiles[4]
q1<-quantiles[2]
irange<-3*(quantiles[4]-quantiles[2])
dataframe[dataframe[[xcol]] > q3+irange,xcol]
dataframe[dataframe[[xcol]] < q1-irange,xcol]
print(sum(is.na(dataframe)))
na.omit(dataframe)
}
}
#Limpiamos el dataset con el MAD
diabdfcategorical[1,1]<-500
for (col in colnames(diabdfcategorical[,-2])) { #Como la columna sexo es categorica no la contamos
diabdfcategorical[1,1]<-500
for (col in colnames(diabdfcategorical[,-2])) { #Como la columna sexo es categorica no la contamos
indBajo <- mean(diabdfcategorical[[col]])-(3*mad(diabdfcategorical[[col]]))
indSuperior <- mean(diabdfcategorical[[col]])+(3*mad(diabdfcategorical[[col]]))
Outlier <- diabdfcategorical[ (diabdfcategorical[[col]]<indBajo) | (diabdfcategorical[[col]]> indSuperior) ,]
diabdfcategorical[ (diabdfcategorical[[col]]<indBajo) | (diabdfcategorical[[col]]> indSuperior) ,] <- NA
diabdfcategorical <- na.omit( diabdfcategorical )
}
#separar los datasets en dos fragmentos
indices<-sample(1:nrow(diabdfcategorical),nrow(diabdfcategorical)*70/100)
}
diabdfcategorical[1,1]<-500
for (col in colnames(diabdfcategorical[,-2])) { #Como la columna sexo es categorica no la contamos
indBajo <- mean(diabdfcategorical[[col]])-(3*mad(diabdfcategorical[[col]]))
indSuperior <- mean(diabdfcategorical[[col]])+(3*mad(diabdfcategorical[[col]]))
Outlier <- diabdfcategorical[ (diabdfcategorical[[col]]<indBajo) | (diabdfcategorical[[col]]> indSuperior) ,]
diabdfcategorical[ (diabdfcategorical[[col]]<indBajo) | (diabdfcategorical[[col]]> indSuperior) ,] <- NA
diabdfcategorical <- na.omit( diabdfcategorical )
}
#separar los datasets en dos fragmentos
indices<-sample(1:nrow(diabdfcategorical),nrow(diabdfcategorical)*70/100)
train<-diabdfcategorical[indices,]
indices<-sample(1:nrow(diabdfcategorical),nrow(diabdfcategorical)*30/100)
test<-diabdfcategorical[indices,]
