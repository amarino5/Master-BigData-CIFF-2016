plot(milk_ts)
min(data$year)
if (!require("forecast")){
install.packages("forecast")
library(forecast)
}
data = read.csv('monthly-milk-production-pounds-p.csv',header = TRUE, skip=0, sep = ";")
class(data)
data$Year <- format(as.Date(paste0(as.character(data[,1]),"-01"),format = "%Y-%m-%d"),"%Y")
data$Month <- format(as.Date(paste0(as.character(data[,1]),"-01"),format = "%Y-%m-%d"),"%b")
colnames(data) <- c("month","milk","year")
data <- na.omit(data)
head(data)
min(data$year)
milk_ts=ts(data$milk,start=1962,frequency=12)
milk_ts
data = read.csv('monthly-milk-production-pounds-p.csv',header = TRUE, skip=0, sep = ";")
data = read.csv('monthly-milk-production-pounds-p.csv',header = TRUE, skip=0, sep = ";")
View(data)
data = read.csv('monthly-milk-production-pounds-p.csv',header = TRUE, skip=0, sep = ";")
!ls
!dir
%dir
!=dir
getwd()
setwd("C:\Desarrollo\repos\Master-BigData-CIFF-2016\analisis estadístico\Practica2")
setwd("C:\\Desarrollo\\repos\\Master-BigData-CIFF-2016\\analisis estadístico\\Practica2")
data = read.csv('monthly-milk-production-pounds-p.csv',header = TRUE, skip=0, sep = ";")
class(data)
data$Year <- format(as.Date(paste0(as.character(data[,1]),"-01"),format = "%Y-%m-%d"),"%Y")
data$Month <- format(as.Date(paste0(as.character(data[,1]),"-01"),format = "%Y-%m-%d"),"%b")
colnames(data) <- c("month","milk","year")
data <- na.omit(data)
head(data)
min(data$year)
milk_ts=ts(data$milk,start=1962,frequency=12)
milk_ts
cycle(milk_ts)
plot(aggregate(milk_ts,FUN = mean))
boxplot(milk_ts~cycle(milk_ts))
plot(milk_ts)
abline(reg=lm(milk_ts~time(milk_ts)))
adf.test(diff(log(milk_ts)), alternative="stationary", k=0)
acf(log(milk_ts))
acf(milk_ts,lag.max=48)
acf(milk_ts)
acf(log(milk_ts))
acf(log(milk_ts))
acf(milk_ts)
acf(log(milk_ts))
acf(milk_ts)
acf(log(milk_ts))
acf(milk_ts,lag.max=48)
acf(diff(milk_ts))
acf(diff(milk_ts),lag.max=48)
pacf(milk_ts,lag.max=48)
tsdisplay(milk_ts)
pacf(diff(milk_ts),lag.max=48)
acf(Estacionaria)
plot(Estacionaria,type="l")
acf(Estacionaria)
Estacionaria=rnorm(200,mean=10,sd=3)
plot(Estacionaria,type="l")
acf(Estacionaria)
pacf(Estacionaria)
RuidoBlanco=rnorm(200,mean=0,sd=3)
plot(RuidoBlanco,type="l")
acf(RuidoBlanco)
pacf(RuidoBlanco)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
AR1=c(5)
alpha=5
alpha1=0.61
for (i in 1:200){
AR1=c(AR1,AR1[i]*alpha1+ruido[i]+alpha)
}
plot(AR1,type="l")
acf(AR1)
pacf(AR1)
acf(AR1)
pacf(AR1)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
MA1=ruido[1]
beta1=-0.61
for (i in 2:200){
MA1=c(MA1,ruido[i]+ruido[i-1]*beta1)
}
plot(MA1,type="l")
acf(MA1)
pacf(MA1)
acf(MA1)
pacf(MA1)
set.seed(12345)
set.seed(12345)
ruido=rnorm(200,mean=0,sd=2)
RW=c(5)
for (i in 1:200){
RW=c(RW,RW[i]+ruido[i])
}
plot(RW,type="l")
acf(RW)
pacf(RW)
plot(AirPassengers)
Air_ts=ts(AirPassengers,frequency=12)
plot(Air_ts)
acf(Air_ts,lag.max=48)
pacf(Air_ts,lag.max=48)
tsdisplay(Air_ts)
Air_ts_d1=diff(Air_ts, lag=1,differences=1)
plot(Air_ts_d1)
acf(Air_ts_d1,lag.max=48)
pacf(Air_ts_d1,lag.max=48)
tsdisplay(Air_ts_d1)
Air_ts_d1_d12=diff(diff(Air_ts, lag=1,differences=1),lag=12,differences=1)
plot(Air_ts_d1_d12)
acf(Air_ts_d1_d12,lag.max=48)
pacf(Air_ts_d1_d12,lag.max=48)
tsdisplay(Air_ts_d1_d12)
acf(Air_ts_d1_d12,lag.max=48)
pacf(Air_ts_d1_d12,lag.max=48)
tsdisplay(Air_ts_d1_d12)
plot(forecast(Air_model,h=24))
Air_model=arima(Air_ts,order=c(0,1,1),seasonal=list(order = c(0, 1, 0)))
plot(forecast(Air_model,h=24))
summary(Air_model)
tsdisplay(residuals(Air_model))
Auto_Air_model=auto.arima(Air_ts,trace=TRUE)
plot(forecast(Auto_Air_model,h=24))
summary(Auto_Air_model)
tsdisplay(residuals(Auto_Air_model))
Auto_milk_model=auto.arima(milk_ts,trace=TRUE)
plot(forecast(Auto_milk_model,h=24))
summary(Auto_milk_model)
tsdisplay(residuals(Auto_milk_model))
min(data$year)
max(data$year)
milk_ts=ts(data$milk,start=1962,frequency=12)
milk_ts
cycle(milk_ts)
plot(aggregate(milk_ts,FUN = mean))
boxplot(milk_ts~cycle(milk_ts))
plot(milk_ts)
abline(reg=lm(milk_ts~time(milk_ts)))
plot(aggregate(milk_ts,FUN = mean))
boxplot(milk_ts~cycle(milk_ts))
cycle(milk_ts)
plot(milk_ts)
plot(milk_ts)
abline(reg=lm(milk_ts~time(milk_ts)))
adf.test(diff(log(milk_ts)), alternative="stationary", k=0)
acf(milk_ts,lag.max=48)
pacf(milk_ts,lag.max=48)
acf(milk_ts,lag.max=48)
milk_ts_d1=diff(milk_ts,lag=1,differences=1)
plot(milk_ts_d1)
acf(milk_ts_d1,lag.max=48)
pacf(milk_ts_d1,lag.max=48)
tsdisplay(milk_ts_d1)
acf(milk_ts_d1,lag.max=48)
acf(milk_ts_d1)
acf(milk_ts_d1,lag.max=24)
acf(milk_ts_d1,lag.max=74)
acf(milk_ts_d1,lag.max=48)
pacf(milk_ts_d1,lag.max=48)
milk_ts_d1_d12=diff(diff(milk_ts, lag=1,differences=1),lag=12,differences=1)
plot(milk_ts_d1_d12)
acf(milk_ts_d1_d12,lag.max=48)
pacf(milk_ts_d1_d12,lag.max=48)
tsdisplay(milk_ts_d1_d12)
milk_model=arima(milk_ts,order=c(0,1,1),seasonal=list(order = c(0, 1, 0)))
plot(forecast(milk_model,h=24))
summary(milk_model)
Auto_milk_model=auto.arima(milk_ts,trace=TRUE)
plot(forecast(Auto_milk_model,h=12))
summary(Auto_milk_model)
tsdisplay(residuals(Auto_milk_model))
milk_ts_d2=diff(milk_ts,lag=1,differences=2)
plot(milk_ts_d2)
acf(milk_ts_d2,lag.max=48)
pacf(milk_ts_d2,lag.max=48)
tsdisplay(milk_ts_d2)
milk_ts_d1_d12=diff(diff(milk_ts, lag=1,differences=1),lag=12,differences=1)
plot(milk_ts_d1_d12)
acf(milk_ts_d1_d12,lag.max=48)
pacf(milk_ts_d1_d12,lag.max=48)
plot(forecast(Auto_milk_model,h=24))
f1 = forecast(Auto_milk_model,24)
f1
?forecast
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
sample = sample.split(houses$price, SplitRatio = 0.5)
data=read.csv("house_train.csv",stringsAsFactors = FALSE)
str(data)
head(data)
summary(data)
data$date= as.Date(substr(data$date, 0, 8), "%Y%m%d")
data$date = as.factor(format(data$date,'%Y'))
data$zipcode = as.factor(data$zipcode)
data$yr_renovated = as.factor(data$yr_renovated)
data$yr_built = as.factor(data$yr_built)
data$condition = as.factor(data$condition)
data$floors = as.factor(data$floors)
data$bathrooms = as.factor(data$bathrooms)
data$bedrooms = as.factor(data$bedrooms)
data$view = as.factor(data$view)
setwd("C:\\Desarrollo\\repos\\Master-BigData-CIFF-2016\\analisis estadístico\\Practica1")
data=read.csv("house_train.csv",stringsAsFactors = FALSE)
str(data)
head(data)
summary(data)
data$date= as.Date(substr(data$date, 0, 8), "%Y%m%d")
data$date = as.factor(format(data$date,'%Y'))
data$zipcode = as.factor(data$zipcode)
data$yr_renovated = as.factor(data$yr_renovated)
data$yr_built = as.factor(data$yr_built)
data$condition = as.factor(data$condition)
data$floors = as.factor(data$floors)
data$bathrooms = as.factor(data$bathrooms)
data$bedrooms = as.factor(data$bedrooms)
data$view = as.factor(data$view)
data$waterfront = as.factor(data$waterfront)
unique(data$grade)
data$grade = as.factor(data$grade)
houses = subset(data, select=c("date","price","bedrooms","sqft_living","sqft_lot","floors","waterfront","view","condition","grade","sqft_above","sqft_basement","yr_built","yr_renovated","zipcode","sqft_living15","sqft_lot15"))
str(houses)
head(houses)
summary(houses)
sample = sample.split(houses$price, SplitRatio = 0.5)
house_train = subset(houses, SAMPLE == TRUE)
house_test = subset(houses, SAMPLE == FALSE)
sample = base::sample.split(houses$price, SplitRatio = 0.5)
house_train = subset(houses, SAMPLE == TRUE)
house_test = subset(houses, SAMPLE == FALSE)
SAMPLE = base::sample.split(houses$price, SplitRatio = 0.5)
house_train = subset(houses, SAMPLE == TRUE)
library(caTools)
SAMPLE = base::sample.split(houses$price, SplitRatio = 0.5)
install.packages("caTools")
setwd("C:\\Desarrollo\\repos\\Master-BigData-CIFF-2016\\analisis estadístico\\Practica1")
data=read.csv("house_train.csv",stringsAsFactors = FALSE)
str(data)
summary(data)
head(data)
data$date= as.Date(substr(data$date, 0, 8), "%Y%m%d")
data$date = as.factor(format(data$date,'%Y'))
data$zipcode = as.factor(data$zipcode)
data$yr_renovated = as.factor(data$yr_renovated)
data$yr_built = as.factor(data$yr_built)
data$condition = as.factor(data$condition)
data$floors = as.factor(data$floors)
data$bathrooms = as.factor(data$bathrooms)
data$bedrooms = as.factor(data$bedrooms)
data$view = as.factor(data$view)
data$waterfront = as.factor(data$waterfront)
unique(data$grade)
data$grade = as.factor(data$grade)
houses = subset(data, select=c("date","price","bedrooms","sqft_living","sqft_lot","floors","waterfront","view","condition","grade","sqft_above","sqft_basement","yr_built","yr_renovated","zipcode","sqft_living15","sqft_lot15"))
str(houses)
head(houses)
summary(houses)
library(caTools)
SAMPLE = base::sample.split(houses$price, SplitRatio = 0.5)
if (!require("caTools")){
install.packages("caTools")
library(caTools)
}
if (!require("caTools")){
install.packages("caTools")
library(MASS)
}
setwd("C:\\Desarrollo\\repos\\Master-BigData-CIFF-2016\\analisis estadístico\\Practica1")
data=read.csv("house_train.csv",stringsAsFactors = FALSE)
str(data)
head(data)
summary(data)
data$date= as.Date(substr(data$date, 0, 8), "%Y%m%d")
data$date = as.factor(format(data$date,'%Y'))
data$zipcode = as.factor(data$zipcode)
data$yr_renovated = as.factor(data$yr_renovated)
data$yr_built = as.factor(data$yr_built)
data$condition = as.factor(data$condition)
data$floors = as.factor(data$floors)
data$bathrooms = as.factor(data$bathrooms)
data$bedrooms = as.factor(data$bedrooms)
data$view = as.factor(data$view)
data$waterfront = as.factor(data$waterfront)
unique(data$grade)
data$grade = as.factor(data$grade)
houses = subset(data, select=c("date","price","bedrooms","sqft_living","sqft_lot","floors","waterfront","view","condition","grade","sqft_above","sqft_basement","yr_built","yr_renovated","zipcode","sqft_living15","sqft_lot15"))
str(houses)
head(houses)
summary(houses)
library(caTools)
SAMPLE = base::sample.split(houses$price, SplitRatio = 0.5)
house_train = subset(houses, SAMPLE == TRUE)
house_test = subset(houses, SAMPLE == FALSE)
library(MASS)
SAMPLE = base::sample.split(houses$price, SplitRatio = 0.5)
SAMPLE = sample.split(houses$price, SplitRatio = 0.5)
house_train = subset(houses, SAMPLE == TRUE)
house_test = subset(houses, SAMPLE == FALSE)
hist(house_train$price)
plot(house_train$price,house_train$sqft_living)
plot(house_train$price,house_train$sqft_lot)
modelo1=lm(price~sqft_living,data=house_train)
library(ggm)
library(igraph)
houses_cor <- house_train
houses_cor$bedrooms = as.numeric(houses_cor$bedrooms)
houses_cor$date = as.numeric(houses_cor$date)
houses_cor$floors = as.numeric(houses_cor$floors)
houses_cor$waterfront = as.numeric(houses_cor$waterfront)
houses_cor$view = as.numeric(houses_cor$view)
houses_cor$condition = as.numeric(houses_cor$condition)
houses_cor$grade = as.numeric(houses_cor$grade)
houses_cor$yr_built = as.numeric(houses_cor$yr_built)
houses_cor$yr_renovated = as.numeric(houses_cor$yr_renovated)
houses_cor$zipcode = as.numeric(houses_cor$zipcode)
cor(houses_cor)
summary(modelo3)
modelo3=lm(log(price)~.,data=house_train)
plot(modelo3$residuals)
smoothScatter(modelo3$residuals)
hist(modelo3$residuals)
qqnorm(modelo3$residuals); qqline(modelo3$residuals,col=2)
confint(modelo3,level=0.95)
modelo4=lm(log(price)~sqft_living+grade+sqft_above+sqft_living15+view+waterfront+zipcode,data=house_train)
summary(modelo4)
plot(modelo4$residuals)
smoothScatter(modelo4$residuals)
hist(modelo4$residuals)
qqnorm(modelo4$residuals); qqline(modelo4$residuals,col=2)
confint(modelo4,level=0.95)
modelo5=lm(log(price)~sqft_living+grade+sqft_above+sqft_living15+view+waterfront,data=house_train)
summary(modelo5)
plot(modelo5$residuals)
smoothScatter(modelo5$residuals)
hist(modelo5$residuals)
qqnorm(modelo5$residuals); qqline(modelo5$residuals,col=2)
confint(modelo5,level=0.95)
alphas=seq(from=0,to=0.5,by=0.01)
medias_recortadas=c()
medias_winsorizadas=c()
for (alpha in alphas){
medias_recortadas=c(medias_recortadas,mean(house_train$price, trim=alpha))
medias_winsorizadas=c(medias_winsorizadas,MediaWinsor(house_train$price,probs=c(alpha,1-alpha)))
}
knitr::opts_chunk$set(echo = TRUE)
if (!require("caTools")){
install.packages("caTools")
library(MASS)
}
setwd("C:\\Desarrollo\\repos\\Master-BigData-CIFF-2016\\analisis estadístico\\Practica1")
library(rlm)
library(MASS)
modelo6=rlm(log(price)~sqft_living+grade+sqft_above+sqft_living15+view+waterfront,data=house_train)
